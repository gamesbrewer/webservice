swagger: '2.0'
info:
  description: ''
  version: 1.0.0
  title: Swagger test
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: localhost:5000
basePath: /api/v1/mysql
tags:
  - name: todo
    description: Everything about your todos
    externalDocs:
      description: Find out more
      url: 'localhost:5000'
schemes:
  - https
  - http
paths:
  /todo:
    post:
      tags:
        - todo
      summary: Add a new todo to the store
      description: ''
      operationId: addtodo
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: todo object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/todo'
      responses:
        '405':
          description: Invalid input
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
    put:
      tags:
        - todo
      summary: Update an existing todo
      description: ''
      operationId: updatetodo
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: todo object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/todo'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: todo not found
        '405':
          description: Validation exception
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
  /todo/findByStatus:
    get:
      tags:
        - todo
      summary: Finds todos by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findtodosByStatus
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/todo'
        '400':
          description: Invalid status value
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'

  '/todo/{todoId}':
    get:
      tags:
        - todo
      summary: Find todo by ID
      description: Returns a single todo
      operationId: gettodoById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: todoId
          in: path
          description: ID of todo to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: todo not found
      security:
        - api_key: []
    post:
      tags:
        - todo
      summary: Updates a todo in the store with form data
      description: ''
      operationId: updatetodoWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: todoId
          in: path
          description: ID of todo that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the todo
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the todo
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
    delete:
      tags:
        - todo
      summary: Deletes a todo
      description: ''
      operationId: deletetodo
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: todoId
          in: path
          description: todo id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: todo not found
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
securityDefinitions:
  todostore_auth:
    type: oauth2
    authorizationUrl: 'http://todostore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:todos': modify todos in your account
      'read:todos': read your todos
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  todo:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      status:
        type: string
        description: todo status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: todo
